<%@ Master Language="C#" Inherits="System.Web.Mvc.ViewMasterPage<ClientSiteViewData>" %>
<%@ Import Namespace="Dtm.Framework.ClientSites" %>
<%@ Import Namespace="Dtm.Framework.Base.Models" %>
<%@ Import Namespace="FMLSHOP.Extensions" %>
<%@ Import Namespace="FMLSHOP.CategoryRouter" %>
<%@ Import Namespace="FMLSHOP.Classes" %>
<%@ Import Namespace="FMLSHOP.CampaignProduct" %>
<%@ Import Namespace="FMLSHOP.StructuredData" %>
<%@ Import Namespace="FMLSHOP.Utils" %>

<%
	// the product name
    var productName = SettingsManager.ContextSettings["Label.ProductName"];

    // the instance provided by the controller
    var categoryProductRouterEngine = ViewData["CategoryProductRouterEngine"] as CategoryProductRouterEngine ?? new CategoryProductRouterEngine();

    // the current category product object
    var categoryProduct = ViewData["CategoryProduct"] as CategoryProductRouter ?? categoryProductRouterEngine.GetCategoryProductByProductSlug(DtmContext.PageCode) ?? new CategoryProductRouter();

    // the current parent product category name
    var productCategoryName = ViewData["ProductCategoryName"] as string ?? string.Empty;

    // the current parent product category route
    var productCategoryRoute = ViewData["ProductCategoryRoute"] as string ?? categoryProduct.RouteToProductCategoryPage ?? string.Empty;

    // the current product listing page route
    var productListingRoute = ViewData["ProductListingRoute"] as string ?? categoryProduct.RouteToProductListingPage ?? string.Empty;

    // the current product detail page route
    var productDetailRoute = ViewData["ProductDetailRoute"] as string ?? categoryProduct.RouteToProductDetailPage ?? string.Empty;

    // the current camapign category
    var category = ViewData["Category"] as CategoryView ?? categoryProduct.CampaignCategory ?? new CategoryView();

    // the current parent campaign category
    var parentCategory = categoryProductRouterEngine
        .ProductCategories
        .FirstOrDefault(pc => string.Equals(
            productCategoryRoute.Replace("/", string.Empty).ToLower(),
            pc.RedirectUrl,
            StringComparison.InvariantCultureIgnoreCase)
        ) ?? new CategoryView();

    // the current campaign product object
    var product = categoryProduct.CampaignProduct;

	// get the product name
	var productTitle = string.Format("{0} | {1}", product.GetProductTitle(), productName);

    // represents the slug name of the product
    var productSlug = product.PropertyIndexer["UrlSlug"];

    // the images associated with the current campaign product
    var productImages = new ProductImages(product.ProductCode, "images/Site1/products/" + product.ProductCode);

    // default product image path name if the custom image could not be found
    var defaultProductImagePath = "/images/Site1/products/default.svg";

    // BazaarVoice product id
    var bazaarVoiceId = product.PropertyIndexer["BazaarVoiceID"];

    // determine if BazaarVoice Id exists
    var hasBazaarVoice = !string.IsNullOrWhiteSpace(bazaarVoiceId);

	var brandName = SettingsManager.ContextSettings["Label.ProductName"];
%>

<!DOCTYPE html>
<html id="dtm" lang="en" class="dtm">
  
	<head>

		<title><%= productTitle %></title>

        <%
            string description = product.MetaDescription ?? product.DisplayText;
            string keywords = product.MetaKeywords;
            string productImage = productImages.SetFirstImageOrDefault(defaultProductImagePath);

            Html.RenderPartial("MetaFavicon", new ViewDataDictionary
            {
                { "Title", productTitle },
                { "Description", description },
                { "Keywords", keywords },
                { "Url", categoryProduct.RouteToProductDetailPage },
                { "Image", productImage }
            });

			Func<CampaignProductView, string> formatAvailabilityByProduct = ((CampaignProductView campaignProduct) =>
            {
				return String.Format("https://schema.org/{0}", campaignProduct.IsProductOutOfStock() ? "OutOfStock" : "InStock");
            });

			List<CampaignProductView> variantProducts = new List<CampaignProductView> { product };
			variantProducts.AddRange(product.GetVariantProductsByOwnerProduct());

			List<FMLSHOP.StructuredData.Offer> offerStructuredData = variantProducts.Select(vp => 
				new FMLSHOP.StructuredData.Offer
				{
					Avaiability = formatAvailabilityByProduct(vp),
					Url = DtmContext.Domain.FullDomainCustomPath(categoryProduct.RouteToProductDetailPage),
					Price = vp.Price.ToString("0.00"),
					PriceCurrency = vp.CurrencyCode,
					Description = vp.GetProductTitle(),
					Sku = vp.ProductSku
				}
			).ToList();

            var productStructuredData = new FMLSHOP.StructuredData.Product
            {
                Id = DtmContext.Domain.FullDomainCustomPath(categoryProduct.RouteToProductDetailPage),
                Name = productTitle,
                Description = description,
                Image = DtmContext.Domain.FullDomainCustomPath(productImage),
                Sku = product.ProductSku,
                Brand = brandName,
				Offers = offerStructuredData
            };

			List<FMLSHOP.StructuredData.Review> reviews = new List<FMLSHOP.StructuredData.Review>();

			Action<List<FMLSHOP.Models.Review>> addProductReviews = ((List<FMLSHOP.Models.Review> productReviews) =>
            {
				productReviews.ForEach(pr => reviews.Add(new FMLSHOP.StructuredData.Review()
                {
					Author = new FMLSHOP.StructuredData.Person()
                    {
						Name = pr.Name,
						Address = pr.Location
                    },
					ReviewBody = pr.Blockquote,
					ReviewRating = new FMLSHOP.StructuredData.Rating()
                    {
						RatingValue = "5"
                    }
                }));
            });

			switch (product.ProductCode)
            {
				case "F7C":
				case "F7V":
					addProductReviews(FMLSHOP.Text.ProductReviews.Flip7);
					break;
				case "SML":
					addProductReviews(FMLSHOP.Text.ProductReviews.Matcha);
					break;
				case "CPB":
					addProductReviews(FMLSHOP.Text.ProductReviews.Collagen);
					break;
            }

			if (reviews.Any())
            {
				productStructuredData.Review = reviews;
            }

            Html.RenderPartial("StructuredDataJSONLD", new ViewDataDictionary
            {
                { "Type", "Product" },
                { "Product", productStructuredData }
            });

            var firstFallback = productImages.GetFirstFallbackImage();

            var defaultImage = !string.IsNullOrEmpty(firstFallback)
                ? productImages.FormatRelativeImagePath(firstFallback)
                : defaultProductImagePath;

            var firstNextGen = productImages.GetFirstNextGenImage();

            var anyWebps = !string.IsNullOrEmpty(firstNextGen) && firstNextGen.EndsWith(".webp");

            if (anyWebps)
            {
                var webpImage = productImages.FormatRelativeImagePath(firstNextGen);
				%>
				<link rel="preload" href="<%= webpImage %>" as="image" type="<%= productImages.GetMimeTypeByFileName(webpImage) %>" />
				<%
            }
            else
            {
				%>
				<link rel="preload" href="<%= defaultImage %>" as="image" />
				<%
            }

			var productCategoryPageName = parentCategory.Name ?? productCategoryName;
			var productCategoryBreadcrumbName = string.Format("All {0}", productCategoryPageName);

			var productListingBreadcrumbName = category.Name;

			var productDetailBreadcrumbName = categoryProduct.CampaignProduct.GetProductTitle();

			var breadcrumbs = new List<FMLSHOP.StructuredData.ListItem>()
            {
				new FMLSHOP.StructuredData.ListItem
                {
					Name = productCategoryBreadcrumbName,
					Item = DtmContext.Domain.FullDomainCustomPath(productCategoryRoute)
                },
				new FMLSHOP.StructuredData.ListItem
                {
					Name = productListingBreadcrumbName,
					Item = DtmContext.Domain.FullDomainCustomPath(productListingRoute)
                },
				new FMLSHOP.StructuredData.ListItem
                {
					Name = productDetailBreadcrumbName,
					Item = DtmContext.Domain.FullDomainCustomPath(productDetailRoute)
                }
            };

			Html.RenderPartial("StructuredDataJSONLD", new ViewDataDictionary
            {
                { "Type", "BreadcrumbList" },
                { "ListItems", breadcrumbs }
            });

			ResourceWriter resourceWriter = new ResourceWriter();

			Html.RenderPartial("GetVersionStyles", new ViewDataDictionary { { "ResourceWriter", resourceWriter } });

			Response.Write(resourceWriter.WriteStylePreload("css/Site1/product-detail-page.css"));
			Response.Write(resourceWriter.WriteLink("css/Site1/product-detail-page.css"));
		%>
	    
		<asp:ContentPlaceHolder ID="head" runat="server"></asp:ContentPlaceHolder>

	</head>

	<body class="dtm__in">

		<!-- // Header -->
		<%= Html.Partial("Header") %>

		<asp:ContentPlaceHolder ID="ProductHeroBanner" runat="server"></asp:ContentPlaceHolder>

		<!-- // Breadcrumbs -->
		<nav aria-label="Product category, listing and detail" class="view section section--breadcrumb">
			<div class="view__in section__in">
				<div class="breadcrumb">
					<a href="<%= productCategoryRoute %>"><%= productCategoryBreadcrumbName %></a>
					<a href="<%= productListingRoute %>#main"><%= productListingBreadcrumbName %></a>
					<a href="<%= productDetailRoute %>"><%= productDetailBreadcrumbName %></a>
				</div>
			</div>
		</nav>

		<div data-variant-product-permalink="<%= productDetailRoute %>">
		<main aria-labelledby="main-title" class="view product product--detail section">
			<div id="main" class="view__anchor"></div>
			<div class="view__in section__in">
				<div class="product__group">
					<div class="product__media">
						<div data-variant-product-group="image">
							<%
								List<string> images = productImages.GetFallbackImages(productImages.GetImagesExceptNamePattern("thumbnail"));
								bool useImageCarousel = images.Count() > 1;

								if (!useImageCarousel)
								{
									%>
									<div class="product__image product__image-container">
										<%
											string image = images.FirstOrDefault();
											
											if (!string.IsNullOrEmpty(image))
											{
												Response.Write(productImages.BuildHTMLPictureElement(image));
											}
											else
											{
												%>
												<img src="<%= defaultImage %>" alt="" width="500" height="500"/>
												<%
											}

											if (product.IsProductNew())
											{
												%>
												<span class="product__new"><b>New</b></span>
												<%
											}
										%>
									</div>
									<%
                                }

								if (useImageCarousel)
								{
									%>
									<div class="slide slide--carousel slide--product-images">
										<div class="slide__container product__image">
											<section aria-label="Product image carousel" id="PDP-carousel" class="slide__into" tabindex="0" aria-live="polite">
												<%
													images.ForEach(image =>
													{
														int index = images.IndexOf(image);
											
														string id = string.Format("image-{0}", index);

														string name = productImages.GetImageFileName(image);

														bool isOffscreen = index != 0;
														%>
														<div id="<%= id %>" class="slide__item product__image-container">
															<%= productImages.BuildHTMLPictureElement(image, isOffscreen) %>
															<%
																if (product.IsProductNew() && name.EndsWith("NEW"))
																{
																	%>
																	<span class="product__new"><b>New</b></span>
																	<%
																}	
															%>
														</div>
														<%
													});
												%>
												<asp:ContentPlaceHolder ID="ProductImageCarousel" runat="server"></asp:ContentPlaceHolder>
											</section>
										</div>
										<%
											List<string> thumbnails = productImages.GetFallbackImages(productImages.GetImagesByNamePattern("thumbnail"));
									
											if (thumbnails.Any())
											{
												%>
												<nav aria-label="Product image thumbnails" class="slide__thumbnails">
												<%
												thumbnails.ForEach(thumbnail =>
												{
													int index = thumbnails.IndexOf(thumbnail);

													string idref = string.Format("image-{0}", index);

													string label = string.Format("Product image thumbnail {0}", index + 1);
													%>
													<a href="#<%= idref %>" data-slide-index="<%= index %>" class="slide__thumbnail" aria-label="<%= label %>">
														<%= productImages.BuildHTMLPictureElement(thumbnail, true) %>
													</a>
													<%
												});							
												%>
													<asp:ContentPlaceHolder ID="ProductImageCarouselThumbnail" runat="server"></asp:ContentPlaceHolder>
												</nav>
												<%
											}
										%>
									</div>							
									<%
								}
							%>
						</div>
					</div>

					<form class="product__info element-controller">
						<h1 id="main-title" class="product__title" data-variant-product-type="name">
							<asp:ContentPlaceHolder ID="ProductTitle" runat="server"></asp:ContentPlaceHolder>
						</h1>

						<div class="product__desc" data-variant-product-type="description">
							<asp:ContentPlaceHolder ID="ProductDescription" runat="server"></asp:ContentPlaceHolder>
						</div>
					
						<% // BazaarVoice Stars &amp; Reviews %>
						<%   
						if (hasBazaarVoice)
						{        
							var bvRedirectUrl = string.Format("{0}#reviews", DtmContext.Domain.FullDomainCustomPath(categoryProduct.RouteToProductDetailPage));    
							%>
							<div class="product__reviews">
								<div data-variant-product-type="bazaarvoice-inline-rating" class="contain contain--bazaarvoice-inline-rating">
									<div data-bv-show="rating_summary" data-bv-redirect-url="<%= bvRedirectUrl %>" data-bv-product-id="<%= bazaarVoiceId %>"></div>
								</div>
							</div>
						<%
							}
						%>

						<div data-variant-product-type="product-form">
							<asp:ContentPlaceHolder ID="ProductForm" runat="server"></asp:ContentPlaceHolder>
						</div>

						<%
							variantProducts = variantProducts.FilterProductsByLiveProperty();

							if (variantProducts.Count() > 1)
							{
								%>
								<div class="product__radiogroup">
								<%
                                    Html.RenderPartial("VariantProductRadioGroup", new ViewDataDictionary
                                    {
                                        { "CategoryProductRouterEngine", categoryProductRouterEngine },
                                        { "OwnerProduct", product },
                                        { "VariantProducts", variantProducts },
                                        { "IsPDP", true }
                                    });
								%>
								</div>
								<%
                                }
                                else
								{
								%>
								<div class="product__price"><span data-variant-product-type="price"><%= product.FormatPriceHTML() %></span></div>

								<hr />
								<%
								}
						%>
						<div class="product__cart">
						<%
							variantProducts.ForEach(variantProduct =>
                            {
								Html.RenderPartial("AddToCartWithQuantity", new ViewDataDictionary
								{
									{ "Product", variantProduct },
									{ "IsPDP", true }
								});
                            });
						%>
						</div>

						<div class="product__disclaimers">
                            <%-- <p>
								<svg><use href="#icon-truck"></use></svg>
								<span>Free Shipping Over $50</span>
                            </p> --%>

							<p>
								<svg><use href="#icon-smile"></use></svg>
								<span>30-Day Money Back Guarantee</span>
                            </p>
						</div>

						<%
							bool omitFeatures = new List<string>() { }.Contains(product.ProductCode);
							bool omitIngredients = new List<string>() { }.Contains(product.ProductCode);
							bool omitDirections = new List<string>() { "RLX", "IMU", "BRN", "MEG" }.Contains(product.ProductCode);
							
							bool omitAccordion = omitFeatures && omitIngredients && omitDirections;

							if (!omitAccordion) {
						%>

						<div id="accordion" class="accordion accordion--tabs element-controller">
							<div class="accordion__group">
								<h2 class="accordion__header">
									<button type="button" class="accordion__button button" aria-controls="features-section" aria-expanded="true" id="features-title">Features &amp; Benefits</button>
								</h2>
								<h2 class="accordion__header">
									<button type="button" class="accordion__button button" aria-controls="ingredients-section" id="ingredients-title">Ingredients</button>
								</h2>
								<% if (!omitDirections) { %>
								<h2 class="accordion__header">
									<button type="button" class="accordion__button button" aria-controls="directions-section" id="directions-title">How To Use</button>
								</h2>
								<% } %>
							</div>
							<section aria-labelledby="features-title" id="features-section" class="accordion__section">
								<div class="accordion__content">
									<div class="product-details">
										<asp:ContentPlaceHolder ID="FeaturesSection" runat="server"></asp:ContentPlaceHolder>   
									</div>   
								</div>
							</section>
							<section id="ingredients-section" aria-labelledby="ingredients-title" hidden class="accordion__section">
								<div class="accordion__content">
									<div class="product-details">
										<asp:ContentPlaceHolder ID="IngredientsSection" runat="server"></asp:ContentPlaceHolder>
									</div>
								</div>
							</section>
							<% if (!omitDirections) { %>
							<section id="directions-section" aria-labelledby="directions-title" hidden class="accordion__section">
								<div class="accordion__content">
									<div class="product-details">
										<asp:ContentPlaceHolder ID="DirectionsSection" runat="server"></asp:ContentPlaceHolder>
									</div>
								</div>
							</section>
							<% } %>
						</div>

						<% 
                            }

                            List<CampaignProductView> relatedProducts = product.GetRelatedProductsByProductView();

                            relatedProducts.ForEach(relatedProduct =>
                            {
								%>
								<div class="product product--related">
									<div class="product__group">
										<div class="product__media">
											<div class="product__image">
											<%
												ProductImages relatedProductImages = new ProductImages(relatedProduct.ProductCode, "images/Site1/products/" + relatedProduct.ProductCode);
												string relatedProductImage = relatedProductImages.GetFirstFallbackImage();

												bool hasRelatedProductImage = !string.IsNullOrEmpty(relatedProductImage);
												if (!hasRelatedProductImage)
												{
													%>
													<img src="<%= defaultProductImagePath %>" alt="" width="100" height="100"/>
													<%
												}

												if (hasRelatedProductImage)
												{
													Response.Write(relatedProductImages.BuildHTMLPictureElement(relatedProductImage, true));
												}
											%>
											</div>
										</div>
										<div class="product__info">
											<div class="product__block">
												<h2><%= relatedProduct.GetProductName() %></h2>
												<p><%= relatedProduct.DisplayText %></p>
											</div>
											<div class="product__price"><%= relatedProduct.FormatPriceHTML() %></div>
											<%
												string outOfStockText = relatedProduct.PropertyIndexer["OOSCustomerMessage", string.Empty];
												bool isOOS = relatedProduct.IsProductOutOfStock();

												string backInStockText = relatedProduct.PropertyIndexer["BackInStockMessage", string.Empty];

												if (!string.IsNullOrWhiteSpace(relatedProduct.AdditionalProductCode) && isOOS)
												{
													%>
													<b class="product__sku">Sku Number: <%= relatedProduct.AdditionalProductCode %></b>
													<%
												}

												if (!string.IsNullOrWhiteSpace(outOfStockText) && isOOS)
												{
													%>
													<strong class="product__oos"><%= outOfStockText %></strong>
													<%
												}

												if (!string.IsNullOrWhiteSpace(backInStockText) && !isOOS)
												{
													%>
													<strong class="product__message"><%= backInStockText %></strong>
													<%
												}
											%>
											<div class="product__cart">
											<%
												Html.RenderPartial("AddToCartWithQuantity", new ViewDataDictionary
												{
													{ "Product", relatedProduct },
													{ "IsPDP", true }
												});
											%>
											</div>
										</div>
									</div>
								</div>
								<%
                            });
						%>
					</form>
				</div>
			</div>
		</main>

		</div>

		<section class="view content content--ingredients section" aria-label="View all our ingredients">
			<div id="section_id" class="view__anchor"></div>
			<div class="view__in section__in content__in content__text">
				<asp:ContentPlaceHolder ID="ProductIngredients" runat="server"></asp:ContentPlaceHolder>
			</div>
		</section>

		<%= Html.Partial("NutritionList", new ViewDataDictionary { { "ProductCode", product.ProductCode } }) %>

		<asp:ContentPlaceHolder ID="ProductReviews" runat="server"></asp:ContentPlaceHolder>

		<%
            //        var productSearch = new ProductSearch();

            //        var otherCustomerProducts = productSearch
            //            .GetSearchableProducts()
            //            .FilterByProductType()
            //            .FilterPdpProduct(product.ProductCode)
            //            .FilterByQuery(product.ProductName ?? String.Empty, true)
            //            .CampaignProducts
            //.Select(cp => categoryProductRouterEngine.GetCategoryProductByCampaignProductView(cp))
            //        	.Where(cpr => categoryProductRouterEngine.IsValidCategoryProductRouter(cpr))
            //            .Take(3) 
            //            .ToList();

            List<CategoryProductRouter> otherCustomerProducts = categoryProductRouterEngine
				.GetProductsByCategoryView(categoryProduct.CampaignCategory)
				.Where(cp => cp.CampaignProduct.ProductCode != categoryProduct.CampaignProduct.ProductCode && categoryProductRouterEngine.IsValidCategoryProductRouter(cp))
				.Take(3)
				.ToList();

            if (otherCustomerProducts.Count() > 0)
            {
				%>
				<section aria-labelledby="related-products-title" class="view product-grid product-grid--listing section">
					<div class="view__in section__in">
						<div class="section__block product-grid__header">
							<h2 id="related-products-title" class="product-grid__title">You May Also Like</h2>
						</div>
						<div class="section__block">
							<div class="product-grid__group">
							<%
                                foreach (var otherCustomerProduct in otherCustomerProducts)
                                {
                                    var index = otherCustomerProducts.IndexOf(otherCustomerProduct);

                                    Html.RenderPartial("CategoryProduct", new ViewDataDictionary
                                    {
                                        { "CategoryProductRouterEngine", categoryProductRouterEngine },
                                        { "CategoryProduct", otherCustomerProduct },
                                        { "IsPdpPage", "true" },
                                        { "Index", index },
										{ "RenderVariantProductRadioGroup", false }
                                    });
                                }
							%>
							</div>
						</div>
					</div>
				</section>
				<%
            }
		%>

		<% if (hasBazaarVoice) { %>
		<section aria-label="Reviews" class="view section">
			<div id="reviews" class="view__anchor"></div>
			<div class="view__in section__in">
				<div data-variant-product-type="bazaarvoice-reviews">
					<div data-bv-show="reviews" data-bv-product-id="<%= bazaarVoiceId %>"></div>
					<div data-bv-show="questions" data-bv-product-id="<%= bazaarVoiceId %>"></div>
				</div>
			</div>
		</section>
		<% } %>

		<!-- // Footer -->

		<%= Html.Partial("Instafeed", Model) %>

		<%= Html.Partial("Footer") %>

        <%= Html.Partial("GetVersionScripts") %>

		<svg hidden>
			<symbol id="icon-smile" x="0px" y="0px" viewBox="0 0 40 40">
				<style>
					#icon-smile path {
						fill: currentColor;
					}
				</style>
				<path d="M27.3,17.4c0.8,0,1.4-0.3,1.9-0.8s0.8-1.2,0.8-1.9c0-0.8-0.3-1.4-0.8-1.9S28.1,12,27.3,12c-0.7,0-1.4,0.3-1.9,0.8
				s-0.8,1.2-0.8,1.9c0,0.7,0.3,1.4,0.8,1.9S26.6,17.4,27.3,17.4z M12.7,17.4c0.8,0,1.4-0.3,1.9-0.8s0.8-1.2,0.8-1.9
				c0-0.8-0.3-1.4-0.8-1.9S13.5,12,12.7,12c-0.7,0-1.4,0.3-1.9,0.8c-0.5,0.5-0.8,1.2-0.8,1.9c0,0.7,0.3,1.4,0.8,1.9S12,17.4,12.7,17.4z
				 M20,31c2.2,0,4.2-0.6,6.1-1.8c1.8-1.2,3.2-2.8,4-4.8h-2.6c-0.8,1.3-1.8,2.4-3.1,3.1c-1.3,0.7-2.8,1.1-4.3,1.1c-1.6,0-3-0.4-4.4-1
				c-1.4-0.7-2.4-1.7-3.1-3.1H9.9c0.9,2,2.2,3.6,4.1,4.8C15.8,30.4,17.8,31,20,31z M20,40c-2.8,0-5.4-0.5-7.8-1.6
				c-2.4-1-4.5-2.5-6.4-4.3c-1.8-1.8-3.2-3.9-4.3-6.4S0,22.8,0,20s0.5-5.4,1.6-7.8s2.5-4.6,4.3-6.4s3.9-3.2,6.4-4.3S17.2,0,20,0
				s5.4,0.5,7.8,1.6s4.6,2.5,6.3,4.3c1.8,1.8,3.2,3.9,4.3,6.4c1.1,2.4,1.6,5,1.6,7.8s-0.5,5.4-1.6,7.8c-1,2.4-2.5,4.6-4.3,6.3
				c-1.8,1.8-3.9,3.2-6.4,4.3C25.4,39.5,22.8,40,20,40z M20,37c4.7,0,8.8-1.6,12-5c3.3-3.3,5-7.3,5-12s-1.6-8.8-5-12.1
				C28.8,4.7,24.7,3,20,3S11.2,4.7,7.9,7.9S3,15.3,3,20s1.7,8.8,4.9,12C11.2,35.4,15.3,37,20,37z"/>
			</symbol>
			<symbol id="icon-truck" x="0px" y="0px" viewBox="0 0 44 32">
			<path d="M9.2,32c-1.6,0-3-0.6-4.2-1.7c-1.1-1.2-1.7-2.5-1.7-4.2H0V3c0-0.8,0.3-1.5,0.9-2.1C1.5,0.3,2.2,0,3,0h29v8.4h5.2l6.8,9V26
				h-3.5c0,1.6-0.6,3-1.7,4.2c-1.2,1.2-2.5,1.7-4.2,1.7c-1.6,0-3-0.6-4.2-1.7c-1.1-1.2-1.7-2.5-1.7-4.2H15.1c0,1.6-0.6,3-1.7,4.2
				C12.2,31.4,10.8,32,9.2,32z M9.2,29c0.8,0,1.5-0.3,2.1-0.8s0.9-1.2,0.9-2c0-0.8-0.3-1.5-0.9-2c-0.6-0.6-1.2-0.9-2.1-0.9
				c-0.8,0-1.5,0.3-2.1,0.9c-0.6,0.6-0.9,1.2-0.9,2s0.3,1.5,0.9,2S8.4,29,9.2,29z M3,23h1.1c0.6-0.9,1.3-1.6,2.2-2.1s1.8-0.8,2.9-0.8
				s2,0.3,2.9,0.8c0.9,0.5,1.6,1.3,2.2,2.1H29V3H3V23z M34.5,29c0.8,0,1.5-0.3,2-0.8s0.8-1.2,0.8-2s-0.3-1.5-0.8-2
				c-0.6-0.6-1.2-0.9-2-0.9c-0.8,0-1.5,0.3-2,0.9c-0.6,0.6-0.8,1.2-0.8,2s0.3,1.5,0.8,2S33.8,29,34.5,29z M32,18.8h9.3l-5.5-7.4H32
				V18.8z"/>
			</symbol>
			<symbol id="delicious-badge" viewBox="0 0 82.3029 82.3027">
				<path d="m9.8097,56.4026l-.4648-1.2334,2.4097-3.6768c.4766-.7285,1.2095-1.6367,1.2095-1.6367l-4.9229,1.8545-.457-1.2129,6.7725-2.5518.4727,1.2539-2.2856,3.5c-.5845.8887-1.2993,1.7783-1.2993,1.7783l4.8809-1.8398.457,1.2129-6.7725,2.5518Z" style="fill: currentColor;"/><path d="m10.4694,47.2053c-2.0625.1406-3.833-1.3604-3.9824-3.5449-.1494-2.1836,1.3999-3.9141,3.4624-4.0547,2.0732-.1416,3.8325,1.3613,3.9819,3.5449.1494,2.1846-1.3887,3.9131-3.4619,4.0547Zm-.4277-6.251c-1.3926.0957-2.48,1.2217-2.3848,2.6143.0967,1.416,1.3276,2.3848,2.7202,2.2891s2.479-1.2227,2.3823-2.6377c-.0952-1.3926-1.3252-2.3613-2.7178-2.2656Z" style="fill: currentColor;"/><path d="m7.1203,34.4875l.8848-3.2549c.3125-1.1533,1.1064-1.9453,2.3359-1.6113.5498.1504.9629.6318,1.0508,1.0723.3906-.75,1.2627-1.1494,2.168-.9043,1.4336.3896,1.8809,1.6807,1.457,3.2432l-.9111,3.3525-6.9854-1.8975Zm3.5088-2.4727c.1465-.5391-.0596-.9307-.5342-1.0596s-.8799.085-1.0439.6885l-.5127,1.8857,1.5635.4258.5273-1.9404Zm3.2861.8115c.2363-.873.0332-1.5303-.6895-1.7266-.7324-.1992-1.2607.2129-1.4775,1.0107l-.5791,2.1338,2.1982.5977.5479-2.0156Z" style="fill: currentColor;"/><path d="m10.0919,26.0442l.6289-1.1338,5.3535,2.9688,2.1006-3.79.9775.542-2.7305,4.9238-6.3301-3.5107Z" style="fill: currentColor;"/><path d="m16.84,21.7473c-1.4375-1.4834-1.4316-3.8057.1406-5.3291s3.8926-1.4551,5.3311.0293c1.4463,1.4932,1.4326,3.8066-.1396,5.3301-1.5732,1.5225-3.8867,1.4629-5.332-.0303Zm4.501-4.3594c-.9717-1.002-2.5342-1.1064-3.5361-.1357-1.0195.9873-.9648,2.5527.0059,3.5547.9707,1.0039,2.5332,1.1074,3.5527.1201,1.0029-.9717.9492-2.5361-.0225-3.5391Z" style="fill: currentColor;"/><path d="m24.0753,11.0051l1.0635-.6143,6.4443,4.6357-1.1406.6592-1.1191-.7988-3.4434,1.9883.1318,1.3691-1.1416.6592-.7949-7.8984Zm4.3467,3.2158l-1.6543-1.2109c-.6279-.4629-1.4619-1.1035-1.4619-1.1035,0,0,.1416,1.0273.2236,1.8184l.2227,2.0381,2.6699-1.542Z" style="fill: currentColor;"/><path d="m31.5636,8.8889l-2.4463.71-.3115-1.0732,6.1357-1.7812.3115,1.0723-2.4463.7109,1.708,5.877-1.2441.3613-1.707-5.877Z" style="fill: currentColor;"/><path d="m38.4874,8.9016l-1.1211.8438-.4521-.6309,1.2188-.7744-1.3418-.5596.3281-.7041,1.2695.6348-.1846-1.3955.8223-.0762.0742,1.4062,1.1318-.8574.4404.6328-1.2168.7969,1.3398.5371-.3164.7021-1.2705-.6328.1748,1.3965-.8115.0752-.085-1.3945Z" style="fill: currentColor;"/><path d="m43.5773,8.8098l-1.2314.6748-.3564-.6885,1.3164-.5928-1.2485-.7451.4248-.6504,1.1665.8096.0161-1.4092.8257.042-.1279,1.4033,1.2432-.6865.3452.6895-1.3179.6143,1.25.7236-.4136.6494-1.167-.8086-.0269,1.4072-.8145-.041.1162-1.3916Z" style="fill: currentColor;"/><path d="m49.3468,11.1604c.2549-.8447,1.1436-1.3115,1.9873-1.0566.8447.2559,1.3145,1.1328,1.0596,1.9766-.2549.8457-1.1357,1.3262-1.9805,1.0713-.8438-.2559-1.3213-1.1465-1.0664-1.9912Z" style="fill: currentColor;"/><path d="m54.6354,15.4114l.9678-.5332c.2202.7305.6147,1.4424,1.5117,2.0508.647.4385,1.501.5723,1.8711.0273.3696-.5459-.1372-1.1328-.6479-1.6934-.9238-1.0059-1.8232-2.127-1.0146-3.3203.7583-1.1191,2.2104-.9707,3.3198-.2188.8599.583,1.3623,1.2744,1.687,2.0879l-.9731.541c-.3052-.7051-.7524-1.2383-1.3721-1.6582-.3979-.2695-1.1943-.5664-1.5645-.0215-.3252.4805.1035,1.002.7065,1.666.9546,1.0391,1.7666,2.21.9771,3.375-.853,1.2578-2.4736.9814-3.6567.1797-1.3037-.8848-1.665-1.8438-1.812-2.4824Z" style="fill: currentColor;"/><path d="m65.2145,15.2942l.7412.8506-.4014,1.6826c-.2012.8564-.6743,2.7637-.6743,2.7637,0,0,1.9463-.1982,2.8154-.2881l1.7295-.1738.7407.8516-5.458,4.752-.8511-.9766,3.7905-3.3008s-.4497.0957-1.272.1895l-3.0864.332.7563-3.043c.1953-.7617.353-1.21.353-1.21l-3.7905,3.2998-.8511-.9766,5.458-4.7529Z" style="fill: currentColor;"/><path d="m68.4005,25.1838c1.895-.8242,4.0664-.0029,4.9399,2.0049.873,2.0068-.0073,4.1562-1.9019,4.9805-1.9062.8291-4.0669.0029-4.9399-2.0049-.8735-2.0078-.0039-4.1514,1.9019-4.9805Zm2.499,5.7461c1.2793-.5566,1.9268-1.9824,1.3701-3.2637-.5654-1.3008-2.0508-1.7998-3.3301-1.2432-1.2803.5566-1.9268,1.9834-1.3608,3.2842.5571,1.2793,2.0405,1.7793,3.3208,1.2227Z" style="fill: currentColor;"/><path d="m71.8131,34.1467c2.0615-.1406,3.8325,1.3613,3.9819,3.5459.1494,2.1836-1.4004,3.9131-3.4619,4.0537-2.0732.1426-3.832-1.3613-3.9814-3.5449-.1494-2.1846,1.3882-3.9121,3.4614-4.0547Zm.4277,6.251c1.3926-.0947,2.4805-1.2217,2.3848-2.6143-.0967-1.415-1.3276-2.3838-2.7202-2.2881-1.3936.0947-2.48,1.2227-2.3833,2.6377.0957,1.3926,1.3252,2.3604,2.7188,2.2646Z" style="fill: currentColor;"/><path d="m74.2267,45.6487l.4307-2.5107,1.1006.1885-1.0801,6.2969-1.1006-.1885.4307-2.5107-6.0322-1.0342.2188-1.2764,6.0322,1.0352Z" style="fill: currentColor;"/><path d="m73.754,51.9143l-.5156,1.1895-2.6533-1.1514-1.4043,3.2373,2.6533,1.1514-.5156,1.1895-6.6396-2.8799.5156-1.1895,2.9717,1.2891,1.4043-3.2383-2.9707-1.2891.5156-1.1885,6.6387,2.8799Z" style="fill: currentColor;"/><path d="m66.0538,62.718l1.7393-1.8604.8164.7637-4.3643,4.666-.8154-.7637,1.7393-1.8594-4.4697-4.1816.8848-.9453,4.4697,4.1807Z" style="fill: currentColor;"/><path d="m62.6505,67.5539l-4.5684,3.2715-.6504-.9082,3.5137-2.5166-1.0273-1.4346-3.3145,2.374-.6445-.9004,3.3145-2.373-1.2422-1.7344-3.6406,2.6084-.6504-.9092,4.6953-3.3623,4.2148,5.8848Z" style="fill: currentColor;"/><path d="m52.4708,69.4436l3.7168,2.3906-1.3809.5488-2.7119-1.8291-.7959,3.2246-1.3291.5283,1.0693-4.2949-3.8379-2.3926,1.3906-.5527,2.8467,1.8369.8271-3.2979,1.3398-.5332-1.1348,4.3711Z" style="fill: currentColor;"/><path d="m45.4708,73.9133l2.5225-.3545.1553,1.1055-6.3262.8896-.1562-1.1055,2.5225-.3545-.8525-6.0625,1.2822-.1797.8525,6.0615Z" style="fill: currentColor;"/><path d="m39.8634,71.1799l-.4302,4.335-1.2896-.1279.4233-4.2686c.1182-1.1895-.4814-1.9326-1.5933-2.043-1.1113-.1104-1.8345.502-1.9526,1.6914l-.4233,4.2686-1.2891-.1279.4302-4.335c.1841-1.8564,1.4956-2.8594,3.3521-2.6748,1.856.1836,2.9565,1.4258,2.7725,3.2822Z" style="fill: currentColor;"/><path d="m30.1115,74.011l-2.8271-1.1709c-1.9194-.7959-2.4663-2.3652-1.8804-3.7783.3716-.8975,1.2075-1.543,2.27-1.5986l-.6636-2.5723,1.3931.5771.4907,2.1133c.1987.0469.4136.1113.6196.1963l1.5166.6289.6543-1.5791,1.1973.4961-2.7705,6.6875Zm-1.1904-5.2686c-.96-.3984-1.9121.0059-2.2583.8408-.355.8564.0337,1.8154.9829,2.208l1.6924.7012,1.2646-3.0537-1.6816-.6963Z" style="fill: currentColor;"/><path d="m22.0465,70.2327l-4.4819-3.3877.6729-.8896,3.4482,2.6055,1.0645-1.4082-3.252-2.457.667-.8828,3.252,2.457,1.2861-1.7012-3.5732-2.7012.6733-.8906,4.6069,3.4824-4.3638,5.7734Z" style="fill: currentColor;"/><path d="m17.6305,60.8577c-.6943.5439-1.6895.416-2.2334-.2793-.5444-.6943-.4243-1.6816.27-2.2266.6948-.5439,1.6914-.4316,2.2358.2637.5439.6943.4224,1.6973-.2725,2.2422Z" style="fill: currentColor;"/><path d="m36.8571,62.919c12.201,2.372,24.015-5.597,26.387-17.798,2.372-12.202-5.597-24.016-17.798-26.387-12.202-2.372-24.016,5.596-26.387,17.798-2.372,12.201,5.597,24.015,17.798,26.387Z" style="fill:none; stroke: currentColor;"/><g><path d="m29.4977,31.8342l-2.3193.998-.5332-1.2949,3.4365-1.7744,1.438.2803-1.8301,9.4141-1.6128-.3145,1.4209-7.3086Z" style="fill: currentColor;"/><path d="m31.9274,35.0061c.5537-2.8467,2.4546-4.5586,4.6191-4.1387,2.1499.418,3.272,2.7178,2.7183,5.5645-.5532,2.8486-2.4551,4.5596-4.605,4.1416-2.1646-.4199-3.2861-2.7188-2.7324-5.5674Zm5.6226,1.0928c.3872-1.9893-.0503-3.5371-1.2856-3.7773-1.25-.2422-2.2354,1.0283-2.6226,3.0176-.3867,1.9912.0513,3.5391,1.3008,3.7812,1.2354.2402,2.2207-1.0303,2.6074-3.0215Z" style="fill: currentColor;"/><path d="m39.483,36.4748c.5537-2.8467,2.4546-4.5586,4.6191-4.1387,2.1504.418,3.272,2.7178,2.7183,5.5645-.5532,2.8486-2.4546,4.5596-4.605,4.1416-2.1646-.4209-3.2861-2.7188-2.7324-5.5674Zm5.623,1.0928c.3867-1.9893-.0508-3.5371-1.2861-3.7773-1.25-.2422-2.2354,1.0283-2.6226,3.0176-.3867,1.9912.0513,3.5391,1.3008,3.7812,1.2354.2402,2.2212-1.0303,2.6079-3.0215Z" style="fill: currentColor;"/><path d="m47.5368,36.0051c.333-1.7139,1.5063-2.708,2.8433-2.4482,1.3359.2598,2.0522,1.6211,1.7188,3.335-.3276,1.6855-1.5039,2.6934-2.8398,2.4336-1.3369-.2598-2.0498-1.6348-1.7222-3.3203Zm3.3999.6611c.2061-1.0605-.0884-1.8721-.771-2.0049-.7129-.1387-1.2461.5117-1.4521,1.5723-.2036,1.0469.0479,1.8486.7598,1.9873.6826.1328,1.2598-.5078,1.4634-1.5547Zm-2.0854,6.2295l7.6318-8.4688.6709.583-7.6318,8.4678-.6709-.582Zm4.8213-1.6104c.3335-1.7168,1.5059-2.709,2.8428-2.4492,1.3369.2607,2.0527,1.6201,1.7197,3.3359-.3281,1.6846-1.5039,2.6924-2.8408,2.4316-1.3369-.2598-2.0488-1.6348-1.7217-3.3184Zm3.3994.6602c.2065-1.0615-.0879-1.873-.771-2.0059-.7119-.1377-1.2451.5127-1.4517,1.5742-.2031,1.0459.0479,1.8486.7598,1.9863.6831.1328,1.2598-.5088,1.4629-1.5547Z" style="fill: currentColor;"/></g><g><path d="m24.986,42.0989l1.5825.3066c1.3149.2559,1.9653,1.334,1.7515,2.4365-.2148,1.1016-1.2212,1.8574-2.5361,1.6025l-1.5825-.3086.7847-4.0371Zm.8877,3.7158c.8535.166,1.5361-.3164,1.6924-1.1191.1558-.8037-.2964-1.5068-1.1499-1.6729l-.8286-.1611-.5425,2.792.8286.1611Z" style="fill: currentColor;"/><path d="m29.4699,42.97l3.1343.6094-.1211.623-2.4116-.4688-.1914.9844,2.2744.4424-.1196.6172-2.2744-.4424-.2314,1.1904,2.4985.4854-.1211.623-3.2212-.626.7847-4.0381Z" style="fill: currentColor;"/><path d="m33.3307,43.72l.7227.1406-.6636,3.415,2.4175.4707-.1211.623-3.1401-.6104.7847-4.0391Z" style="fill: currentColor;"/><path d="m37.1788,44.468l.7231.1406-.7847,4.0381-.7231-.1396.7847-4.0391Z" style="fill: currentColor;"/><path d="m38.276,46.7717c.2227-1.1465,1.3071-1.9004,2.5283-1.6631.5234.1016.9688.3691,1.2666.7373l-.5122.4053c-.2334-.2656-.5142-.416-.832-.4775-.835-.1631-1.5469.3721-1.6968,1.1445-.1514.7783.3076,1.5449,1.0986,1.6992.3926.0762.7822.0039,1.0933-.2012l.3457.584c-.4409.2715-.9927.3838-1.5723.2715-1.2212-.2373-1.9443-1.3418-1.7192-2.5Z" style="fill: currentColor;"/><path d="m42.8336,45.5676l.7227.1406-.7847,4.0381-.7227-.1406.7847-4.0381Z" style="fill: currentColor;"/><path d="m43.9293,47.8762c.2241-1.1523,1.3081-1.9062,2.5293-1.6689s1.9443,1.3428,1.7207,2.4951c-.2256,1.1582-1.3086,1.9053-2.5298,1.668s-1.9453-1.3359-1.7202-2.4941Zm3.4961.6797c.1509-.7783-.3091-1.541-1.0879-1.6924-.7915-.1533-1.5029.3809-1.6543,1.1592s.3086,1.54,1.0996,1.6934c.7793.1523,1.4912-.3818,1.6426-1.1602Z" style="fill: currentColor;"/><path d="m48.819,49.2532l.4722-2.4307.7227.1406-.4653,2.3926c-.1294.668.1709,1.1201.7939,1.2412s1.0645-.1865,1.1943-.8545l.4648-2.3926.7231.1406-.4722,2.4307c-.2021,1.04-.998,1.5391-2.0386,1.3369s-1.5972-.9648-1.395-2.0049Z" style="fill: currentColor;"/><path d="m52.754,51.1497l.3867-.4941c.2783.332.6431.6162,1.2476.7334.4365.085.9126-.0352.9844-.4033.0713-.3672-.3242-.5605-.7168-.7402-.707-.3184-1.4277-.7041-1.2715-1.5078.1465-.7539.9385-1.002,1.686-.8564.5796.1133.9966.3623,1.3481.7158l-.3877.5c-.3169-.3008-.6704-.4795-1.0879-.5605-.2681-.0518-.7505-.0303-.8223.3379-.0625.3242.2783.5.7412.7129.7314.3301,1.417.7607,1.2646,1.5449-.165.8477-1.0737,1.0664-1.8716.9111-.8784-.1709-1.2817-.5928-1.501-.8936Z" style="fill: currentColor;"/></g><path d="m33.3963,81.0483c22.035,4.283,43.369-10.107,47.652-32.142C85.3323,26.8723,70.9413,5.5373,48.9063,1.2543,26.8723-3.0287,5.5373,11.3613,1.2543,33.3963c-4.283,22.034,10.107,43.369,32.142,47.652Z" style="fill:none; stroke: currentColor;"/></svg>
		</svg>

	</body>

</html>
