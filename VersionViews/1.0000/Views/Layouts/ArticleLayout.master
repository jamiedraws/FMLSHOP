<%@ Master Language="C#" Inherits="System.Web.Mvc.ViewMasterPage<ClientSiteViewData>" %>
<%@ Import Namespace="Dtm.Framework.ClientSites" %>
<%@ Import Namespace="Dtm.Framework.Models.Ecommerce" %>
<%@ Import Namespace="FMLSHOP.BlogPosts" %>
<%@ Import Namespace="FMLSHOP.StructuredData" %>
<%@ Import Namespace="FMLSHOP.Utils" %>
<%@ Import Namespace="HtmlAgilityPack" %>
<%@ Import Namespace="FMLSHOP.CategoryRouter" %>

<% 
    // the product name
    var productName = SettingsManager.ContextSettings["Label.ProductName"];

    // the instance provided by the controller
    var blogPostsEngine = ViewData["BlogPostsEngine"] as BlogPostsEngine ?? new BlogPostsEngine();

    // the current blog post entry provided by the controller
    var blogPost = ViewData["BlogPost"] as BlogPostView ?? new BlogPostView();

    // determines if the current blog post exists
    var hasBlogPost = blogPostsEngine.BlogPostExists(blogPost);

    // the current category name, provided by the controller
    var blogCategoryName = ViewData["BlogCategoryName"] as string;

    // the current blog roll tag name, provided by the controller
    var blogTagName = ViewData["BlogTagName"] as string;

    // if the route points to a blog post, use the blog post title;
    // otherwise, if the route points to a blog roll category, use the blog category name;
    // otherwise, if the route points to the main blog roll, use the default title
    var blogTitle = blogPost.Title ?? blogCategoryName ?? blogTagName;

    // the current blog post permalink route, provided by the controller
    var blogPermalinkRoute = ViewData["BlogPermalinkRoute"] as string;

    // the main blog roll category route, provided by the controller
    var blogCategoryRoute = ViewData["BlogCategoryRoute"] as string;

    // the main blog roll tag route, provided by the controller
    var blogTagRoute = ViewData["BlogTagRoute"] as string;

    // the current route, provided by the controller
    var currentRoute = ViewData["CurrentRoute"] as string ?? string.Empty;

    var hasBlogPermalinkRoute = !string.IsNullOrWhiteSpace(blogPermalinkRoute);
    var hasBlogCategoryRoute = !string.IsNullOrWhiteSpace(blogCategoryRoute);
    var hasBlogRoute = !string.IsNullOrWhiteSpace(blogTagRoute);

    var blogUrl = blogPermalinkRoute
        ?? blogCategoryRoute
        ?? blogTagRoute
        ?? string.Empty;

    // parse and strip html tags from the category description
    var htmlDoc = new HtmlDocument();
    htmlDoc.LoadHtml(blogPost.ShortDescription ?? String.Empty);

    // the current blog post description
    var blogDescription = htmlDoc.DocumentNode.InnerText;

    // the current blog post keywords
    var blogKeywords = blogPost.Meta;

    // the current blog post thumbnail
    var blogThumbnail = blogPost.ImageThumbnailPath ?? string.Empty;

    var postMetaTitle = string.Format("{0} | {1}", blogTitle, productName); 
%>

<!DOCTYPE html>
<html lang="en" class="dtm">
  
	<head>

        <title><%= postMetaTitle %></title>

        <%= Html.Partial("MetaFavicon", new ViewDataDictionary
        {
            { "Title", postMetaTitle },
            { "Keywords", blogKeywords },
            { "Description", blogDescription },
            { "Url", blogUrl },
            { "Image", blogThumbnail }
        }) %>

        <%
            var blogTagBreadcrumbName = string.Format("All {0}", blogTagName);

            var breadcrumbs = new List<FMLSHOP.StructuredData.ListItem>();

            if (hasBlogRoute)
            {
                breadcrumbs.Add(new FMLSHOP.StructuredData.ListItem
                {
                    Name = blogTagBreadcrumbName,
                    Item = DtmContext.Domain.FullDomainCustomPath(blogTagRoute)
                });
            }

            if (hasBlogCategoryRoute)
            {
                breadcrumbs.Add(new FMLSHOP.StructuredData.ListItem
                {
                    Name = blogCategoryName,
                    Item = DtmContext.Domain.FullDomainCustomPath(blogCategoryRoute)
                });
            }

            if (hasBlogPermalinkRoute)
            {
                breadcrumbs.Add(new FMLSHOP.StructuredData.ListItem
                {
                    Name = blogPost.Title,
                    Item = DtmContext.Domain.FullDomainCustomPath(blogPermalinkRoute)
                });
            }

            Html.RenderPartial("StructuredDataJSONLD", new ViewDataDictionary
            {
                { "Type", "BreadcrumbList" },
                { "ListItems", breadcrumbs }
            });
        %>
		
        <%= Html.Partial("GetVersionStyles") %>

		<asp:ContentPlaceHolder ID="head" runat="server"></asp:ContentPlaceHolder>

	</head>

	<body class="dtm__in">

		<%= Html.Partial("Header") %>

        <!-- // Breadcrumbs -->
        <nav aria-label="Article category" class="view section section--breadcrumb">
            <div class="view__in section__in">
                <div class="breadcrumb">
                    <% var mainAnchor = "#main"; %>
                    <% if (hasBlogRoute) { %>
                        <% var route = blogTagRoute == currentRoute ? mainAnchor : blogTagRoute; %>
                        <a href="<%= route %>"><%= blogTagBreadcrumbName %></a>
                    <% } %>
                
                    <% if (hasBlogCategoryRoute) { %>
                        <% var route = blogCategoryRoute == currentRoute ? mainAnchor : blogCategoryRoute; %>
                        <a href="<%= route %>"><%= blogCategoryName %></a>
                    <% } %>

                    <% if (hasBlogPermalinkRoute) { %>
                        <a href="<%= mainAnchor %>"><%= blogPost.Title %></a>
                    <% } %>
                </div>
            </div>
        </nav>

		<asp:ContentPlaceHolder ID="MainContent" runat="server"></asp:ContentPlaceHolder>

        <%
            var categoryProductRouterEngine = ViewData["CategoryProductRouterEngine"] as CategoryProductRouterEngine ?? new CategoryProductRouterEngine();

            var categories = categoryProductRouterEngine.GetChildCategoriesByParentCategoryCode("products");

            var fetchProducts = categories.Select(c => categoryProductRouterEngine.FilterCategoryProductsByCampaignCategory(c));

            if (fetchProducts.Any())
            {
                var products = fetchProducts.FirstOrDefault().Take(3).ToList();

                if (products.Count() > 0)
                {
				    %>
				    <section aria-label="Shop Products" class="view product-grid product-grid--listing section">
					    <div class="view__in section__in">
						    <div class="section__block">
							    <div class="product-grid__group">
							    <%
                                    foreach (var product in products)
                                    {
                                        var index = products.IndexOf(product);

                                        Html.RenderPartial("CategoryProduct", new ViewDataDictionary
                                        {
                                            { "CategoryProductRouterEngine", categoryProductRouterEngine },
                                            { "CategoryProduct", product },
                                            { "IsPdpPage", "true" },
                                            { "Index", index },
										    { "RenderVariantProductRadioGroup", false }
                                        });
                                    }
							    %>
							    </div>
						    </div>
					    </div>
				    </section>
				    <%
                }
            }

            // the collection of blog posts related to the current category, provided by the controller
            var categoryPosts = blogPostsEngine.GetBlogPostsByTagSlug(blogTagName).Where(bp => bp != blogPost).Take(3);

            if (categoryPosts.Any())
            {
                %>
                <section aria-labelledby="feature-article-title" class="view content content--post-cards section">
                    <div class="view__anchor" id="main"></div>
                    <div class="view__in section__in">
                        <div class="section__block">
                            <div class="content__header content__text">
                                <h1 id="feature-article-title" class="content__title">We think you might also enjoy these!</h1>
                            </div>
                        </div>
                        <div class="section__block">
                            <div class="content__group">  
                            <%
                            ImageEngine logos = new ImageEngine("brands", "images/brands");

                            foreach (var categoryPost in categoryPosts)
                            {
                                Html.RenderPartial("BlogArticleExcerpt", new ViewDataDictionary
                                {
                                    { "BlogPost", categoryPost },
                                    { "BlogPostsEngine", blogPostsEngine },
                                    { "Logos", logos }
                                });
                            }
                            %>
                            </div>
                        </div>
                    </div>
                </section>
                <%
            }
		%>

		<%= Html.Partial("Instafeed", Model) %>

        <%= Html.Partial("Footer") %>

        <%= Html.Partial("GetVersionScripts") %>

		<%= Model.FrameworkVersion %>

	</body>

</html>
